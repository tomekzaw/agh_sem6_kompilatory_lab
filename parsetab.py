
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocIFXnonassocELSEnonassoc=ADDASSIGNSUBASSIGNMULASSIGNDIVASSIGNnonassoc<>LTEGTEEQNEQleft+-DOTADDDOTSUBleft*/DOTMULDOTDIVrightUMINUSleft\'ADDASSIGN BREAK CONTINUE DIVASSIGN DOTADD DOTDIV DOTMUL DOTSUB ELSE EQ EYE FLOATNUM FOR GTE ID IF INTNUM LTE MULASSIGN NEQ ONES PRINT RETURN STRING SUBASSIGN WHILE ZEROSprogram : instructionsinstructions : instructions instructioninstructions : instruction : \'{\' instructions \'}\'instruction : IF \'(\' condition \')\' instruction %prec IFXinstruction : IF \'(\' condition \')\' instruction ELSE instructioninstruction : FOR variable \'=\' range instructioninstruction : WHILE \'(\' condition \')\' instructioncondition : expression comparision_operator expressioncomparision_operator : EQ\n                            | NEQ\n                            | LTE\n                            | GTE\n                            | \'<\'\n                            | \'>\'variable : IDrange : expression \':\' expressioninstruction : statement \';\'statement : BREAKstatement : CONTINUEstatement : RETURNstatement : RETURN expressionstatement : PRINT expression_liststatement : lvalue assignment_operator expressionlvalue : variablelvalue : variable \'[\' expression \',\' expression \']\'assignment_operator : \'=\'\n                           | ADDASSIGN\n                           | SUBASSIGN\n                           | MULASSIGN\n                           | DIVASSIGNexpression : expression \'+\' expression\n                  | expression \'-\' expression\n                  | expression \'*\' expression\n                  | expression \'/\' expression\n                  | expression DOTADD expression\n                  | expression DOTSUB expression\n                  | expression DOTMUL expression\n                  | expression DOTDIV expressionexpression : \'-\' expression %prec UMINUSexpression : expression "\'" expression : \'(\' expression \')\'expression : lvalueexpression : INTNUMexpression : FLOATNUMexpression : STRINGexpression_list : expression_list \',\' expressionexpression_list : expressionexpression_list : expression : \'[\' matrix_rows \']\'matrix_rows : matrix_rows \';\' expression_listmatrix_rows : expression_listexpression : EYE \'(\' expression \')\'expression : EYE \'(\' expression \',\' expression \')\'expression : ZEROS \'(\' expression \')\'expression : ZEROS \'(\' expression \',\' expression \')\'expression : ONES \'(\' expression \')\'expression : ONES \'(\' expression \',\' expression \')\''
    
_lr_action_items = {'{':([0,2,3,4,7,15,16,21,25,26,27,28,41,55,56,65,73,76,77,78,79,80,81,82,83,84,85,86,92,94,97,99,101,103,105,106,107,111,112,113,114,],[-3,4,-2,-3,-25,-16,4,-18,-43,-44,-45,-46,-4,-41,-40,4,4,4,-32,-33,-34,-35,-36,-37,-38,-39,-42,-50,-5,-7,-8,-53,-55,-57,4,-17,-26,-6,-54,-56,-58,]),'IF':([0,2,3,4,7,15,16,21,25,26,27,28,41,55,56,65,73,76,77,78,79,80,81,82,83,84,85,86,92,94,97,99,101,103,105,106,107,111,112,113,114,],[-3,5,-2,-3,-25,-16,5,-18,-43,-44,-45,-46,-4,-41,-40,5,5,5,-32,-33,-34,-35,-36,-37,-38,-39,-42,-50,-5,-7,-8,-53,-55,-57,5,-17,-26,-6,-54,-56,-58,]),'FOR':([0,2,3,4,7,15,16,21,25,26,27,28,41,55,56,65,73,76,77,78,79,80,81,82,83,84,85,86,92,94,97,99,101,103,105,106,107,111,112,113,114,],[-3,6,-2,-3,-25,-16,6,-18,-43,-44,-45,-46,-4,-41,-40,6,6,6,-32,-33,-34,-35,-36,-37,-38,-39,-42,-50,-5,-7,-8,-53,-55,-57,6,-17,-26,-6,-54,-56,-58,]),'WHILE':([0,2,3,4,7,15,16,21,25,26,27,28,41,55,56,65,73,76,77,78,79,80,81,82,83,84,85,86,92,94,97,99,101,103,105,106,107,111,112,113,114,],[-3,8,-2,-3,-25,-16,8,-18,-43,-44,-45,-46,-4,-41,-40,8,8,8,-32,-33,-34,-35,-36,-37,-38,-39,-42,-50,-5,-7,-8,-53,-55,-57,8,-17,-26,-6,-54,-56,-58,]),'BREAK':([0,2,3,4,7,15,16,21,25,26,27,28,41,55,56,65,73,76,77,78,79,80,81,82,83,84,85,86,92,94,97,99,101,103,105,106,107,111,112,113,114,],[-3,10,-2,-3,-25,-16,10,-18,-43,-44,-45,-46,-4,-41,-40,10,10,10,-32,-33,-34,-35,-36,-37,-38,-39,-42,-50,-5,-7,-8,-53,-55,-57,10,-17,-26,-6,-54,-56,-58,]),'CONTINUE':([0,2,3,4,7,15,16,21,25,26,27,28,41,55,56,65,73,76,77,78,79,80,81,82,83,84,85,86,92,94,97,99,101,103,105,106,107,111,112,113,114,],[-3,11,-2,-3,-25,-16,11,-18,-43,-44,-45,-46,-4,-41,-40,11,11,11,-32,-33,-34,-35,-36,-37,-38,-39,-42,-50,-5,-7,-8,-53,-55,-57,11,-17,-26,-6,-54,-56,-58,]),'RETURN':([0,2,3,4,7,15,16,21,25,26,27,28,41,55,56,65,73,76,77,78,79,80,81,82,83,84,85,86,92,94,97,99,101,103,105,106,107,111,112,113,114,],[-3,12,-2,-3,-25,-16,12,-18,-43,-44,-45,-46,-4,-41,-40,12,12,12,-32,-33,-34,-35,-36,-37,-38,-39,-42,-50,-5,-7,-8,-53,-55,-57,12,-17,-26,-6,-54,-56,-58,]),'PRINT':([0,2,3,4,7,15,16,21,25,26,27,28,41,55,56,65,73,76,77,78,79,80,81,82,83,84,85,86,92,94,97,99,101,103,105,106,107,111,112,113,114,],[-3,13,-2,-3,-25,-16,13,-18,-43,-44,-45,-46,-4,-41,-40,13,13,13,-32,-33,-34,-35,-36,-37,-38,-39,-42,-50,-5,-7,-8,-53,-55,-57,13,-17,-26,-6,-54,-56,-58,]),'ID':([0,2,3,4,6,7,12,13,15,16,17,19,20,21,23,24,25,26,27,28,29,35,36,37,38,39,40,41,44,47,48,49,50,51,52,53,54,55,56,60,61,62,63,65,66,67,68,69,70,71,72,73,75,76,77,78,79,80,81,82,83,84,85,86,87,92,94,95,97,99,100,101,102,103,104,105,106,107,111,112,113,114,],[-3,15,-2,-3,15,-25,15,15,-16,15,15,15,15,-18,15,15,-43,-44,-45,-46,15,15,-27,-28,-29,-30,-31,-4,15,15,15,15,15,15,15,15,15,-41,-40,15,15,15,15,15,15,-10,-11,-12,-13,-14,-15,15,15,15,-32,-33,-34,-35,-36,-37,-38,-39,-42,-50,15,-5,-7,15,-8,-53,15,-55,15,-57,15,15,-17,-26,-6,-54,-56,-58,]),'$end':([0,1,2,3,21,41,92,94,97,111,],[-3,0,-1,-2,-18,-4,-5,-7,-8,-6,]),'}':([3,4,16,21,41,92,94,97,111,],[-2,-3,41,-18,-4,-5,-7,-8,-6,]),'(':([5,8,12,13,17,19,20,23,24,29,30,31,32,35,36,37,38,39,40,44,47,48,49,50,51,52,53,54,60,61,62,63,66,67,68,69,70,71,72,75,87,95,100,102,104,],[17,20,24,24,24,24,24,24,24,24,60,61,62,24,-27,-28,-29,-30,-31,24,24,24,24,24,24,24,24,24,24,24,24,24,24,-10,-11,-12,-13,-14,-15,24,24,24,24,24,24,]),'=':([7,14,15,18,107,],[-25,36,-16,44,-26,]),'ADDASSIGN':([7,14,15,107,],[-25,37,-16,-26,]),'SUBASSIGN':([7,14,15,107,],[-25,38,-16,-26,]),'MULASSIGN':([7,14,15,107,],[-25,39,-16,-26,]),'DIVASSIGN':([7,14,15,107,],[-25,40,-16,-26,]),'+':([7,15,22,25,26,27,28,34,43,45,55,56,57,64,74,77,78,79,80,81,82,83,84,85,86,88,89,90,91,93,96,99,101,103,106,107,108,109,110,112,113,114,],[-25,-16,47,-43,-44,-45,-46,47,47,47,-41,-40,47,47,47,-32,-33,-34,-35,-36,-37,-38,-39,-42,-50,47,47,47,47,47,47,-53,-55,-57,47,-26,47,47,47,-54,-56,-58,]),'-':([7,12,13,15,17,19,20,22,23,24,25,26,27,28,29,34,35,36,37,38,39,40,43,44,45,47,48,49,50,51,52,53,54,55,56,57,60,61,62,63,64,66,67,68,69,70,71,72,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,95,96,99,100,101,102,103,104,106,107,108,109,110,112,113,114,],[-25,23,23,-16,23,23,23,48,23,23,-43,-44,-45,-46,23,48,23,-27,-28,-29,-30,-31,48,23,48,23,23,23,23,23,23,23,23,-41,-40,48,23,23,23,23,48,23,-10,-11,-12,-13,-14,-15,48,23,-32,-33,-34,-35,-36,-37,-38,-39,-42,-50,23,48,48,48,48,48,23,48,-53,23,-55,23,-57,23,48,-26,48,48,48,-54,-56,-58,]),'*':([7,15,22,25,26,27,28,34,43,45,55,56,57,64,74,77,78,79,80,81,82,83,84,85,86,88,89,90,91,93,96,99,101,103,106,107,108,109,110,112,113,114,],[-25,-16,49,-43,-44,-45,-46,49,49,49,-41,-40,49,49,49,49,49,-34,-35,49,49,-38,-39,-42,-50,49,49,49,49,49,49,-53,-55,-57,49,-26,49,49,49,-54,-56,-58,]),'/':([7,15,22,25,26,27,28,34,43,45,55,56,57,64,74,77,78,79,80,81,82,83,84,85,86,88,89,90,91,93,96,99,101,103,106,107,108,109,110,112,113,114,],[-25,-16,50,-43,-44,-45,-46,50,50,50,-41,-40,50,50,50,50,50,-34,-35,50,50,-38,-39,-42,-50,50,50,50,50,50,50,-53,-55,-57,50,-26,50,50,50,-54,-56,-58,]),'DOTADD':([7,15,22,25,26,27,28,34,43,45,55,56,57,64,74,77,78,79,80,81,82,83,84,85,86,88,89,90,91,93,96,99,101,103,106,107,108,109,110,112,113,114,],[-25,-16,51,-43,-44,-45,-46,51,51,51,-41,-40,51,51,51,-32,-33,-34,-35,-36,-37,-38,-39,-42,-50,51,51,51,51,51,51,-53,-55,-57,51,-26,51,51,51,-54,-56,-58,]),'DOTSUB':([7,15,22,25,26,27,28,34,43,45,55,56,57,64,74,77,78,79,80,81,82,83,84,85,86,88,89,90,91,93,96,99,101,103,106,107,108,109,110,112,113,114,],[-25,-16,52,-43,-44,-45,-46,52,52,52,-41,-40,52,52,52,-32,-33,-34,-35,-36,-37,-38,-39,-42,-50,52,52,52,52,52,52,-53,-55,-57,52,-26,52,52,52,-54,-56,-58,]),'DOTMUL':([7,15,22,25,26,27,28,34,43,45,55,56,57,64,74,77,78,79,80,81,82,83,84,85,86,88,89,90,91,93,96,99,101,103,106,107,108,109,110,112,113,114,],[-25,-16,53,-43,-44,-45,-46,53,53,53,-41,-40,53,53,53,53,53,-34,-35,53,53,-38,-39,-42,-50,53,53,53,53,53,53,-53,-55,-57,53,-26,53,53,53,-54,-56,-58,]),'DOTDIV':([7,15,22,25,26,27,28,34,43,45,55,56,57,64,74,77,78,79,80,81,82,83,84,85,86,88,89,90,91,93,96,99,101,103,106,107,108,109,110,112,113,114,],[-25,-16,54,-43,-44,-45,-46,54,54,54,-41,-40,54,54,54,54,54,-34,-35,54,54,-38,-39,-42,-50,54,54,54,54,54,54,-53,-55,-57,54,-26,54,54,54,-54,-56,-58,]),"'":([7,15,22,25,26,27,28,34,43,45,55,56,57,64,74,77,78,79,80,81,82,83,84,85,86,88,89,90,91,93,96,99,101,103,106,107,108,109,110,112,113,114,],[-25,-16,55,-43,-44,-45,-46,55,55,55,-41,55,55,55,55,55,55,55,55,55,55,55,55,-42,-50,55,55,55,55,55,55,-53,-55,-57,55,-26,55,55,55,-54,-56,-58,]),';':([7,9,10,11,12,13,15,22,25,26,27,28,29,33,34,55,56,58,59,64,77,78,79,80,81,82,83,84,85,86,87,91,98,99,101,103,107,112,113,114,],[-25,21,-19,-20,-21,-49,-16,-22,-43,-44,-45,-46,-49,-23,-48,-41,-40,87,-52,-24,-32,-33,-34,-35,-36,-37,-38,-39,-42,-50,-49,-47,-51,-53,-55,-57,-26,-54,-56,-58,]),',':([7,13,15,25,26,27,28,29,33,34,45,55,56,59,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,98,99,101,103,107,112,113,114,],[-25,-49,-16,-43,-44,-45,-46,-49,63,-48,75,-41,-40,63,-32,-33,-34,-35,-36,-37,-38,-39,-42,-50,-49,100,102,104,-47,63,-53,-55,-57,-26,-54,-56,-58,]),'EQ':([7,15,25,26,27,28,43,55,56,77,78,79,80,81,82,83,84,85,86,99,101,103,107,112,113,114,],[-25,-16,-43,-44,-45,-46,67,-41,-40,-32,-33,-34,-35,-36,-37,-38,-39,-42,-50,-53,-55,-57,-26,-54,-56,-58,]),'NEQ':([7,15,25,26,27,28,43,55,56,77,78,79,80,81,82,83,84,85,86,99,101,103,107,112,113,114,],[-25,-16,-43,-44,-45,-46,68,-41,-40,-32,-33,-34,-35,-36,-37,-38,-39,-42,-50,-53,-55,-57,-26,-54,-56,-58,]),'LTE':([7,15,25,26,27,28,43,55,56,77,78,79,80,81,82,83,84,85,86,99,101,103,107,112,113,114,],[-25,-16,-43,-44,-45,-46,69,-41,-40,-32,-33,-34,-35,-36,-37,-38,-39,-42,-50,-53,-55,-57,-26,-54,-56,-58,]),'GTE':([7,15,25,26,27,28,43,55,56,77,78,79,80,81,82,83,84,85,86,99,101,103,107,112,113,114,],[-25,-16,-43,-44,-45,-46,70,-41,-40,-32,-33,-34,-35,-36,-37,-38,-39,-42,-50,-53,-55,-57,-26,-54,-56,-58,]),'<':([7,15,25,26,27,28,43,55,56,77,78,79,80,81,82,83,84,85,86,99,101,103,107,112,113,114,],[-25,-16,-43,-44,-45,-46,71,-41,-40,-32,-33,-34,-35,-36,-37,-38,-39,-42,-50,-53,-55,-57,-26,-54,-56,-58,]),'>':([7,15,25,26,27,28,43,55,56,77,78,79,80,81,82,83,84,85,86,99,101,103,107,112,113,114,],[-25,-16,-43,-44,-45,-46,72,-41,-40,-32,-33,-34,-35,-36,-37,-38,-39,-42,-50,-53,-55,-57,-26,-54,-56,-58,]),')':([7,15,25,26,27,28,42,46,55,56,57,77,78,79,80,81,82,83,84,85,86,88,89,90,93,99,101,103,107,108,109,110,112,113,114,],[-25,-16,-43,-44,-45,-46,65,76,-41,-40,85,-32,-33,-34,-35,-36,-37,-38,-39,-42,-50,99,101,103,-9,-53,-55,-57,-26,112,113,114,-54,-56,-58,]),']':([7,15,25,26,27,28,29,34,55,56,58,59,77,78,79,80,81,82,83,84,85,86,87,91,96,98,99,101,103,107,112,113,114,],[-25,-16,-43,-44,-45,-46,-49,-48,-41,-40,86,-52,-32,-33,-34,-35,-36,-37,-38,-39,-42,-50,-49,-47,107,-51,-53,-55,-57,-26,-54,-56,-58,]),':':([7,15,25,26,27,28,55,56,74,77,78,79,80,81,82,83,84,85,86,99,101,103,107,112,113,114,],[-25,-16,-43,-44,-45,-46,-41,-40,95,-32,-33,-34,-35,-36,-37,-38,-39,-42,-50,-53,-55,-57,-26,-54,-56,-58,]),'[':([7,12,13,15,17,19,20,23,24,29,35,36,37,38,39,40,44,47,48,49,50,51,52,53,54,60,61,62,63,66,67,68,69,70,71,72,75,87,95,100,102,104,],[19,29,29,-16,29,29,29,29,29,29,29,-27,-28,-29,-30,-31,29,29,29,29,29,29,29,29,29,29,29,29,29,29,-10,-11,-12,-13,-14,-15,29,29,29,29,29,29,]),'INTNUM':([12,13,17,19,20,23,24,29,35,36,37,38,39,40,44,47,48,49,50,51,52,53,54,60,61,62,63,66,67,68,69,70,71,72,75,87,95,100,102,104,],[26,26,26,26,26,26,26,26,26,-27,-28,-29,-30,-31,26,26,26,26,26,26,26,26,26,26,26,26,26,26,-10,-11,-12,-13,-14,-15,26,26,26,26,26,26,]),'FLOATNUM':([12,13,17,19,20,23,24,29,35,36,37,38,39,40,44,47,48,49,50,51,52,53,54,60,61,62,63,66,67,68,69,70,71,72,75,87,95,100,102,104,],[27,27,27,27,27,27,27,27,27,-27,-28,-29,-30,-31,27,27,27,27,27,27,27,27,27,27,27,27,27,27,-10,-11,-12,-13,-14,-15,27,27,27,27,27,27,]),'STRING':([12,13,17,19,20,23,24,29,35,36,37,38,39,40,44,47,48,49,50,51,52,53,54,60,61,62,63,66,67,68,69,70,71,72,75,87,95,100,102,104,],[28,28,28,28,28,28,28,28,28,-27,-28,-29,-30,-31,28,28,28,28,28,28,28,28,28,28,28,28,28,28,-10,-11,-12,-13,-14,-15,28,28,28,28,28,28,]),'EYE':([12,13,17,19,20,23,24,29,35,36,37,38,39,40,44,47,48,49,50,51,52,53,54,60,61,62,63,66,67,68,69,70,71,72,75,87,95,100,102,104,],[30,30,30,30,30,30,30,30,30,-27,-28,-29,-30,-31,30,30,30,30,30,30,30,30,30,30,30,30,30,30,-10,-11,-12,-13,-14,-15,30,30,30,30,30,30,]),'ZEROS':([12,13,17,19,20,23,24,29,35,36,37,38,39,40,44,47,48,49,50,51,52,53,54,60,61,62,63,66,67,68,69,70,71,72,75,87,95,100,102,104,],[31,31,31,31,31,31,31,31,31,-27,-28,-29,-30,-31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-10,-11,-12,-13,-14,-15,31,31,31,31,31,31,]),'ONES':([12,13,17,19,20,23,24,29,35,36,37,38,39,40,44,47,48,49,50,51,52,53,54,60,61,62,63,66,67,68,69,70,71,72,75,87,95,100,102,104,],[32,32,32,32,32,32,32,32,32,-27,-28,-29,-30,-31,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-10,-11,-12,-13,-14,-15,32,32,32,32,32,32,]),'ELSE':([21,41,92,94,97,111,],[-18,-4,105,-7,-8,-6,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'instructions':([0,4,],[2,16,]),'instruction':([2,16,65,73,76,105,],[3,3,92,94,97,111,]),'variable':([2,6,12,13,16,17,19,20,23,24,29,35,44,47,48,49,50,51,52,53,54,60,61,62,63,65,66,73,75,76,87,95,100,102,104,105,],[7,18,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'statement':([2,16,65,73,76,105,],[9,9,9,9,9,9,]),'lvalue':([2,12,13,16,17,19,20,23,24,29,35,44,47,48,49,50,51,52,53,54,60,61,62,63,65,66,73,75,76,87,95,100,102,104,105,],[14,25,25,14,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,14,25,14,25,14,25,25,25,25,25,14,]),'expression':([12,13,17,19,20,23,24,29,35,44,47,48,49,50,51,52,53,54,60,61,62,63,66,75,87,95,100,102,104,],[22,34,43,45,43,56,57,34,64,74,77,78,79,80,81,82,83,84,88,89,90,91,93,96,34,106,108,109,110,]),'expression_list':([13,29,87,],[33,59,98,]),'assignment_operator':([14,],[35,]),'condition':([17,20,],[42,46,]),'matrix_rows':([29,],[58,]),'comparision_operator':([43,],[66,]),'range':([44,],[73,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> instructions','program',1,'p_program','Mparser.py',28),
  ('instructions -> instructions instruction','instructions',2,'p_instructions','Mparser.py',32),
  ('instructions -> <empty>','instructions',0,'p_instructions_empty','Mparser.py',36),
  ('instruction -> { instructions }','instruction',3,'p_instruction_block','Mparser.py',40),
  ('instruction -> IF ( condition ) instruction','instruction',5,'p_instruction_if','Mparser.py',44),
  ('instruction -> IF ( condition ) instruction ELSE instruction','instruction',7,'p_instruction_if_else','Mparser.py',48),
  ('instruction -> FOR variable = range instruction','instruction',5,'p_instruction_for','Mparser.py',52),
  ('instruction -> WHILE ( condition ) instruction','instruction',5,'p_instruction_while','Mparser.py',56),
  ('condition -> expression comparision_operator expression','condition',3,'p_condition','Mparser.py',60),
  ('comparision_operator -> EQ','comparision_operator',1,'p_comparision_operator','Mparser.py',64),
  ('comparision_operator -> NEQ','comparision_operator',1,'p_comparision_operator','Mparser.py',65),
  ('comparision_operator -> LTE','comparision_operator',1,'p_comparision_operator','Mparser.py',66),
  ('comparision_operator -> GTE','comparision_operator',1,'p_comparision_operator','Mparser.py',67),
  ('comparision_operator -> <','comparision_operator',1,'p_comparision_operator','Mparser.py',68),
  ('comparision_operator -> >','comparision_operator',1,'p_comparision_operator','Mparser.py',69),
  ('variable -> ID','variable',1,'p_variable','Mparser.py',73),
  ('range -> expression : expression','range',3,'p_range','Mparser.py',77),
  ('instruction -> statement ;','instruction',2,'p_instruction_statement','Mparser.py',81),
  ('statement -> BREAK','statement',1,'p_statement_break','Mparser.py',85),
  ('statement -> CONTINUE','statement',1,'p_statement_continue','Mparser.py',89),
  ('statement -> RETURN','statement',1,'p_statement_return','Mparser.py',93),
  ('statement -> RETURN expression','statement',2,'p_statement_return_expression','Mparser.py',97),
  ('statement -> PRINT expression_list','statement',2,'p_statement_print','Mparser.py',101),
  ('statement -> lvalue assignment_operator expression','statement',3,'p_statement_assignment','Mparser.py',105),
  ('lvalue -> variable','lvalue',1,'p_lvalue_variable','Mparser.py',109),
  ('lvalue -> variable [ expression , expression ]','lvalue',6,'p_lvalue_matrix_index','Mparser.py',113),
  ('assignment_operator -> =','assignment_operator',1,'p_assignment_operator','Mparser.py',117),
  ('assignment_operator -> ADDASSIGN','assignment_operator',1,'p_assignment_operator','Mparser.py',118),
  ('assignment_operator -> SUBASSIGN','assignment_operator',1,'p_assignment_operator','Mparser.py',119),
  ('assignment_operator -> MULASSIGN','assignment_operator',1,'p_assignment_operator','Mparser.py',120),
  ('assignment_operator -> DIVASSIGN','assignment_operator',1,'p_assignment_operator','Mparser.py',121),
  ('expression -> expression + expression','expression',3,'p_expression_binary','Mparser.py',125),
  ('expression -> expression - expression','expression',3,'p_expression_binary','Mparser.py',126),
  ('expression -> expression * expression','expression',3,'p_expression_binary','Mparser.py',127),
  ('expression -> expression / expression','expression',3,'p_expression_binary','Mparser.py',128),
  ('expression -> expression DOTADD expression','expression',3,'p_expression_binary','Mparser.py',129),
  ('expression -> expression DOTSUB expression','expression',3,'p_expression_binary','Mparser.py',130),
  ('expression -> expression DOTMUL expression','expression',3,'p_expression_binary','Mparser.py',131),
  ('expression -> expression DOTDIV expression','expression',3,'p_expression_binary','Mparser.py',132),
  ('expression -> - expression','expression',2,'p_expression_uminus','Mparser.py',136),
  ("expression -> expression '",'expression',2,'p_expression_transpose','Mparser.py',140),
  ('expression -> ( expression )','expression',3,'p_expression_group','Mparser.py',144),
  ('expression -> lvalue','expression',1,'p_expression_lvalue','Mparser.py',148),
  ('expression -> INTNUM','expression',1,'p_expression_intnum','Mparser.py',152),
  ('expression -> FLOATNUM','expression',1,'p_expression_floatnum','Mparser.py',156),
  ('expression -> STRING','expression',1,'p_expression_string','Mparser.py',160),
  ('expression_list -> expression_list , expression','expression_list',3,'p_expression_list','Mparser.py',164),
  ('expression_list -> expression','expression_list',1,'p_expression_list_single','Mparser.py',168),
  ('expression_list -> <empty>','expression_list',0,'p_expression_list_empty','Mparser.py',172),
  ('expression -> [ matrix_rows ]','expression',3,'p_matrix','Mparser.py',176),
  ('matrix_rows -> matrix_rows ; expression_list','matrix_rows',3,'p_matrix_rows','Mparser.py',180),
  ('matrix_rows -> expression_list','matrix_rows',1,'p_matrix_rows_single','Mparser.py',184),
  ('expression -> EYE ( expression )','expression',4,'p_eye_1','Mparser.py',188),
  ('expression -> EYE ( expression , expression )','expression',6,'p_eye_2','Mparser.py',192),
  ('expression -> ZEROS ( expression )','expression',4,'p_zeros_1','Mparser.py',196),
  ('expression -> ZEROS ( expression , expression )','expression',6,'p_zeros_2','Mparser.py',200),
  ('expression -> ONES ( expression )','expression',4,'p_ones_1','Mparser.py',204),
  ('expression -> ONES ( expression , expression )','expression',6,'p_ones_2','Mparser.py',208),
]
